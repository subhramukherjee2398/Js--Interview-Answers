1.What is an event in the DOM, and how do you handle it?

Ans : An event in the DOM is an action or occurrence that happens in the web page or browser that can be detected and responded to by JavaScript

1.Mouse Events: click, dblclick, mousedown, mouseup, mouseover, mouseout, mousemove
2.Keyboard Events: keydown, keyup, keypress
3.Form Events: submit, change, focus, blur
4.Window Events: load, resize, scroll


2.What is the difference between innerHTML and textContent?

Ans : images

3.How do you create and append a new element to the DOM using JavaScript?

Ans : 1.document.createElement()
    2.textContent, innerHTML, or setAttribute
    3.element.appendChild()
    4.insertBefore(newNode, referenceNode)

4.How do you remove an element from the DOM?

Ans : 1.element.remove()
    2.element.parentNode.removeChild(element)
    3.element.outerHTML = ''
    4.element.removeAttribute()


5.parentNode v parent element?
.parentNode:
Returns the immediate parent of a node, regardless of its type.
More general; works with all types of nodes.
.parentElement:
Returns the immediate parent only if it is an element node; otherwise, it returns null.
More restrictive; useful when working specifically with elements.

6.What is event delegation and why is it useful?

Ans : Event delegation is a technique in JavaScript where you attach a single event listener to a parent element rather than attaching multiple event listeners to individual child elements.

How Event Delegation Works:
.An event is triggered on a child element.
.The event bubbles up to the parent element.
.The parentâ€™s event listener catches the event.
.You can inspect the event.target property to determine which child element triggered the event and act accordingly.

Useful : For Dymanic data changes.

7.What is the difference between addEventListener and onclick?

Ans : addEventListener is used to attach an event listener to an element.
onclick is used to attach an event listener to a button element.

8.What is Event Propagation?

Ans : Event propagation refers to the way events move through the DOM (Document Object Model) when an event is triggered on a specific element

9.What is bubbling and capturing in DOM events?

Ans : Bubbling and capturing are the two phases of event propagation in the DOM when an event is triggered.

.In the bubbling phase, the event starts at the target element (the element that directly triggered the event) and then moves upward, or "bubbles," through its parent elements until it reaches the root of the DOM (e.g., document).

.In the capturing phase, the event starts at the root of the DOM (document) and moves down through the DOM tree to the target element that triggered the event.

10.How can you stop an event from propagating in the DOM?
Using event.stopPropagation() and event.preventDefault().

11.What is the difference between preventDefault() and return false?

Ans : preventDefault() prevents the default action of the event from happening, while return false stops the event from propagating.

12.What is the difference between addEventListener and attachEvent?

Ans : addEventListener is a method of the EventTarget interface, which is inherited by all objects that can receive events, such as elements and documents. attachEvent is a method of the Document interface, which is used to attach event handlers to elements in Internet Explorer.

13.How do you detect which element triggered an event?

Ans : event.target

14.How do you detect which element triggered an event at the time of bubbling?

Ans : event.currentTarget or this

15.How do you handle dynamic elements in the DOM (elements added after the page loads)?

Ans : Event Delegation


