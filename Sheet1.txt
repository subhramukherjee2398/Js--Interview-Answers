
1.What is the difference between var, let, and const?

Ans 

Var :
Scope: Function-scoped or globally scoped. If declared outside a function, it is accessible anywhere in the script. Inside a function, it is only accessible within that function.
Hoisting: Variables declared with var are hoisted to the top of their containing function or global context. This means they can be referenced before their declaration, but their value will be undefined until the declaration line is reached.
Re-declaration: You can re-declare a var variable within the same scope.

console.log(x); // undefined
var x = 10;
console.log(x); // 10

let :

Scope: Block-scoped. Variables declared with let are only accessible within the block {} they are defined in.
Hoisting: Similar to var, let variables are hoisted, but they cannot be accessed until the declaration is encountered (this is known as the "temporal dead zone").
Re-declaration: You cannot re-declare a let variable in the same scope.

if (true) {
    let y = 20;
    console.log(y); // 20
}
console.log(y); // ReferenceError: y is not defined

const :

Scope: Block-scoped, like let.
Hoisting: Also hoisted, with the same temporal dead zone behavior as let.
Re-declaration: You cannot re-declare a const variable in the same scope.
Mutability: Variables declared with const cannot be reassigned. However, if the variable is an object or an array, you can still modify its properties or elements.

const z = 30;
console.log(z); // 30
// z = 40; // TypeError: Assignment to constant variable

const obj = { key: 'value' };
obj.key = 'new value'; // Allowed
console.log(obj.key); // 'new value'
------------------------------------------------------------------------
2.whtais use of "use strict" in js ?

Ans : Basuically use strict is a optional flag that can be used to enable stricter parsing and error handling in ECMAScript modules. It  gives some restriction like 

1.Prevents Undeclared Variables
2.Disallows Duplicate Parameter Names
3.Eliminates this Binding to Global Object: ( does not allow gert access global object)
4.Prohibits Deleting Variables/Objects/Functions:
-------------------------------------------------------------------------------
3. Data types in JavaScript?

Ans : 
Primitive Types: Number, String, Boolean, Undefined, Null, Symbol, BigInt.
Non-Primitive Types: Object, Array, Function.
1.String
2.Number
3.Boolean
4.Undefined
5.Null
6.Symbol
7.Object
8.Function
9.Array
10.BigInt
11.Error
12.TypedArray
13.Map
14.Set
15.WeakMap
16.WeakSet
17.Proxy
18.Promise
19.Generator
20.AsyncFunction
21.AsyncGenerator
22.Reflect
23.Symbol.toPrimitive
24.Symbol.toStringTag
25.Symbol.iterator
26.Symbol.asyncIterator
27.Symbol.match
28.Symbol.replace
29.Symbol.search
30.Symbol.split
31.Symbol.hasInstance
32.Symbol.isConcatSpreadable       

----------------------------------------------

4.All Operands condition in JavaScript?

Ans : follow Images.
-----------------
5. Data Types in JavaScript?

And : Datatype is basically into 2 types

Primitive
Non-primitive
Difference between is call by value and call by reference, it means how we are saving the data into memory and how we are accessing the data

Primitive Datatype:

Primitive is into 7 categories
Prmitive datatype is call by value
when we take the data, it is copied, so the changes are done on copied data
String, Number, Boolean, null (meam empty), undefined, Symbol (to make the value unique), BigInt
Non-Primitive Datatype:

It is also called as reference type
we can get the reference of the available data
Array, Objects, Functions

Memory is of 2 types 1. Stack 2. Heap Memory
Stack memory is used for primitiva datatype while heap memory is used for non primitive datatype

we will get original value reference when take back the value from reference value
Whatever goes in heap, we only get the reference, means whatever changes we are doing, we are doing in original value
From stack, we get the copy of the value

------------------------------------

6.String Methods in JS?

Ans : 
1.charAt(index)
2.charCodeAt(index) 
3.concat(string)
4.includes(string)
5.indexOf(string)
6.lastIndexOf(string)
7.length
8.match(regex)
9.replace(regex, string)
10.search(regex)
11.slice(start, end)
12.split(regex)
13.substring(start, end)
14.toLowerCase()
15.toUpperCase()
16.trim()
17.trimStart()
18.trimEnd()
19.toLocaleLowerCase()
20.toLocaleUpperCase()
21.toLocaleLowerCase()
22.toLocaleUpperCase()
23.toString()
24.valueOf()

--------------------------------------

7.Numbers and Maths in JS?
https://github.com/subhramukherjee2398/js-hindi-youtube/blob/main/01_basics/05_strings.js
Ans :
toFixed() : to give the precision value till few decimal values, like toFixed(2) ➜ it wwill give .00 like that
toPrecision(3): it will focus on only 3 digit value only
toLocaleString('en-IN') : this method will be helpful in giving the output in redable format of number, like 1000000 ➜ 1,000,00
Maths.abs(): it will convert -ve value into +ve value, +ve will remain +ve, it helps to convert valeue into +ve value.
Math.round(): To get the round value, example: Math.round(4.3) ➜ 4
Math.ceil(): It will round the value to top. Example: Math.ceil(4.6) ➜ 5 or Math.ceil(4.2) ➜ 5
Math.floor(): It will take bottom value, Example: Math.floor(4.2) -6-> 4.2 or Math.floor(4.6) ➜ 4, It will always takes the lowest value
Mostly we will use round() method instead of ceil and floor
Math.min(): we can findout the minimum value from the given numbers, example: Math.min(3,4,5,6,) ➜ 3
Math.max(): we can findout the maximum value from the given numbers, example: Math.min(3,4,5,6,) ➜ 6
random(): it will the random value between 0 and 1
To make the value in 1 digit then add 1, example: (Math.random()*10)+1
We can round of the value using Math.floor in random method
We can add 10, if we want the value more then 10